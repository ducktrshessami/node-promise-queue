"use strict";var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __hasOwnProp=Object.prototype.hasOwnProperty;var __export=(target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})},__copyProps=(to,from,except,desc)=>{if(from&&typeof from=="object"||typeof from=="function")for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to};var __toCommonJS=mod=>__copyProps(__defProp({},"__esModule",{value:!0}),mod);var src_exports={};__export(src_exports,{PromiseQueue:()=>PromiseQueue,PromiseQueueMap:()=>PromiseQueueMap});module.exports=__toCommonJS(src_exports);var PromiseQueue=class{promises=[];_all=null;get all(){return this._all??=Promise.all(this.promises),this._all}push(promise){this.promises.push(promise),this._all=null}resolveLazy(promise){return typeof promise=="function"?this.all.then(promise):promise}add(promise){let p=this.resolveLazy(promise);return this.push(p),this}clear(){let all=this.all;return this.promises.length=0,this._all=null,all}};var PromiseQueueMap=class _PromiseQueueMap{static DefaultGroup="default";groups=new Map;_all=null;static allPromises(groups){let allPromises=new Set;for(let group of groups)group.promises.forEach(promise=>allPromises.add(promise));return allPromises}get all(){return this._all?this._all:(this._all=Promise.all(_PromiseQueueMap.allPromises(this.groups.values())),this._all)}ensureGroup(name){let group=this.groups.get(name);return group||(group=new PromiseQueue,this.groups.set(name,group)),group}static resolveLazy(promise,groups){return typeof promise=="function"?Promise.all(_PromiseQueueMap.allPromises(groups)).then(promise):promise}add(promise,groupNames=_PromiseQueueMap.DefaultGroup){let groups=(typeof groupNames=="string"?[groupNames]:groupNames).map(name=>this.ensureGroup(name)),p=_PromiseQueueMap.resolveLazy(promise,groups);return groups.forEach(group=>group.add(p)),this._all=null,this}group(groupName=_PromiseQueueMap.DefaultGroup){return this.groups.get(groupName)?.all??Promise.resolve([])}clearGroup(groupName=_PromiseQueueMap.DefaultGroup){let group=this.groups.get(groupName);return this._all=null,group?.clear()??Promise.resolve([])}clear(){let all=this.all;return this.groups.forEach(group=>group.clear()),this.groups.clear(),this._all=null,all}};0&&(module.exports={PromiseQueue,PromiseQueueMap});
//# sourceMappingURL=index.js.map