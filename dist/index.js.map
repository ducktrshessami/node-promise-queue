{"version":3,"sources":["../src/index.ts","../src/PromiseQueue.ts","../src/PromiseQueueMap.ts"],"sourcesContent":["export * from \"./PromiseQueue\";\nexport * from \"./PromiseQueueMap\";\nexport * from \"./util\";\n","import { PromiseOrLazy } from \"./util\";\n\nexport class PromiseQueue {\n    public readonly promises: Promise<any>[];\n    private _all: Promise<any[]> | null;\n\n    constructor() {\n        this.promises = [];\n        this._all = null;\n    }\n\n    public get all(): Promise<any[]> {\n        this._all ??= Promise.all(this.promises);\n        return this._all;\n    }\n\n    protected push(promise: Promise<any>): void {\n        this.promises.push(promise);\n        this._all = null;\n    }\n\n    public resolveLazy<T>(promise: PromiseOrLazy<T>): Promise<T> {\n        return typeof promise === \"function\" ? this.all.then(promise) : promise;\n    }\n\n    public add(promise: PromiseOrLazy<any>): this {\n        const p = this.resolveLazy(promise);\n        this.push(p);\n        return this;\n    }\n\n    public clear(): Promise<any[]> {\n        const all = this.all;\n        this.promises.length = 0;\n        this._all = null;\n        return all;\n    }\n}\n","import { PromiseQueue } from \"./PromiseQueue\";\nimport { PromiseOrLazy } from \"./util\";\n\nexport class PromiseQueueMap extends PromiseQueue {\n    public static readonly DefaultGroup = \"default\";\n\n    private readonly groups: Map<string, PromiseQueue> = new Map();\n\n    private ensureGroup(name: string): PromiseQueue {\n        let group = this.groups.get(name);\n        if (!group) {\n            group = new PromiseQueue();\n            this.groups.set(name, group);\n        }\n        return group;\n    }\n\n    public add(promise: PromiseOrLazy<any>, groupName: string = PromiseQueueMap.DefaultGroup): this {\n        const group = this.ensureGroup(groupName);\n        const p = group.resolveLazy(promise);\n        group.add(p);\n        this.push(p);\n        return this;\n    }\n\n    public group(groupName: string = PromiseQueueMap.DefaultGroup): Promise<any[]> {\n        const group = this.groups.get(groupName);\n        return group?.all ?? Promise.resolve([]);\n    }\n\n    public clearGroup(groupName: string = PromiseQueueMap.DefaultGroup): Promise<any[]> {\n        const group = this.groups.get(groupName);\n        return group?.clear() ?? Promise.resolve([]);\n    }\n\n    public clear(): Promise<any[]> {\n        const all = super.clear();\n        this.groups.forEach(group => group.clear());\n        this.groups.clear();\n        return all;\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEO,IAAM,eAAN,MAAmB;AAAA,EACN;AAAA,EACR;AAAA,EAER,cAAc;AACV,SAAK,WAAW,CAAC;AACjB,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,IAAW,MAAsB;AAC7B,SAAK,SAAS,QAAQ,IAAI,KAAK,QAAQ;AACvC,WAAO,KAAK;AAAA,EAChB;AAAA,EAEU,KAAK,SAA6B;AACxC,SAAK,SAAS,KAAK,OAAO;AAC1B,SAAK,OAAO;AAAA,EAChB;AAAA,EAEO,YAAe,SAAuC;AACzD,WAAO,OAAO,YAAY,aAAa,KAAK,IAAI,KAAK,OAAO,IAAI;AAAA,EACpE;AAAA,EAEO,IAAI,SAAmC;AAC1C,UAAM,IAAI,KAAK,YAAY,OAAO;AAClC,SAAK,KAAK,CAAC;AACX,WAAO;AAAA,EACX;AAAA,EAEO,QAAwB;AAC3B,UAAM,MAAM,KAAK;AACjB,SAAK,SAAS,SAAS;AACvB,SAAK,OAAO;AACZ,WAAO;AAAA,EACX;AACJ;;;AClCO,IAAM,kBAAN,MAAM,yBAAwB,aAAa;AAAA,EAC9C,OAAuB,eAAe;AAAA,EAErB,SAAoC,oBAAI,IAAI;AAAA,EAErD,YAAY,MAA4B;AAC5C,QAAI,QAAQ,KAAK,OAAO,IAAI,IAAI;AAChC,QAAI,CAAC,OAAO;AACR,cAAQ,IAAI,aAAa;AACzB,WAAK,OAAO,IAAI,MAAM,KAAK;AAAA,IAC/B;AACA,WAAO;AAAA,EACX;AAAA,EAEO,IAAI,SAA6B,YAAoB,iBAAgB,cAAoB;AAC5F,UAAM,QAAQ,KAAK,YAAY,SAAS;AACxC,UAAM,IAAI,MAAM,YAAY,OAAO;AACnC,UAAM,IAAI,CAAC;AACX,SAAK,KAAK,CAAC;AACX,WAAO;AAAA,EACX;AAAA,EAEO,MAAM,YAAoB,iBAAgB,cAA8B;AAC3E,UAAM,QAAQ,KAAK,OAAO,IAAI,SAAS;AACvC,WAAO,OAAO,OAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC3C;AAAA,EAEO,WAAW,YAAoB,iBAAgB,cAA8B;AAChF,UAAM,QAAQ,KAAK,OAAO,IAAI,SAAS;AACvC,WAAO,OAAO,MAAM,KAAK,QAAQ,QAAQ,CAAC,CAAC;AAAA,EAC/C;AAAA,EAEO,QAAwB;AAC3B,UAAM,MAAM,MAAM,MAAM;AACxB,SAAK,OAAO,QAAQ,WAAS,MAAM,MAAM,CAAC;AAC1C,SAAK,OAAO,MAAM;AAClB,WAAO;AAAA,EACX;AACJ;","names":[]}