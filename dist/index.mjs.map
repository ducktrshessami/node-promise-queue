{"version":3,"sources":["../src/PromiseQueue.ts","../src/PromiseQueueMap.ts"],"sourcesContent":["import { PromiseOrLazy } from \"./util\";\n\nexport class PromiseQueue {\n    public readonly promises: Promise<any>[] = [];\n    private _all: Promise<any[]> | null = null;\n    private _allSettled: Promise<PromiseSettledResult<any>[]> | null = null;\n\n    public get all(): Promise<any[]> {\n        this._all ??= Promise.all(this.promises);\n        return this._all;\n    }\n\n    public get allSettled(): Promise<PromiseSettledResult<any>[]> {\n        this._allSettled ??= Promise.allSettled(this.promises);\n        return this._allSettled;\n    }\n\n    protected push(promise: Promise<any>): void {\n        this.promises.push(promise);\n        this._all = null;\n        this._allSettled = null;\n    }\n\n    public resolveLazy<T>(promise: PromiseOrLazy<T>): Promise<T> {\n        return typeof promise === \"function\" ? this.all.then(promise) : promise;\n    }\n\n    public add(promise: PromiseOrLazy<any>): this {\n        const p = this.resolveLazy(promise);\n        this.push(p);\n        return this;\n    }\n\n    public clear(): Promise<any[]> {\n        const all = this.all;\n        this.promises.length = 0;\n        this._all = null;\n        return all;\n    }\n}\n","import { PromiseQueue } from \"./PromiseQueue\";\nimport { PromiseOrLazy } from \"./util\";\n\nexport class PromiseQueueMap {\n    public static readonly DefaultGroup = \"default\";\n\n    private readonly groups: Map<string, PromiseQueue> = new Map();\n    private _all: Promise<any[]> | null = null;\n    private _allSettled: Promise<PromiseSettledResult<any>[]> | null = null;\n\n    protected static allPromises(groups: Iterable<PromiseQueue>): Set<Promise<any>> {\n        const allPromises: Set<Promise<any>> = new Set();\n        for (const group of groups) {\n            group.promises.forEach(promise => allPromises.add(promise));\n        }\n        return allPromises;\n    }\n\n    public get all(): Promise<any[]> {\n        if (this._all) {\n            return this._all;\n        }\n        this._all = Promise.all(PromiseQueueMap.allPromises(this.groups.values()));\n        return this._all;\n    }\n\n    public get allSettled(): Promise<PromiseSettledResult<any>[]> {\n        if (this._allSettled) {\n            return this._allSettled;\n        }\n        this._allSettled = Promise.allSettled(PromiseQueueMap.allPromises(this.groups.values()));\n        return this._allSettled;\n    }\n\n    private ensureGroup(name: string): PromiseQueue {\n        let group = this.groups.get(name);\n        if (!group) {\n            group = new PromiseQueue();\n            this.groups.set(name, group);\n        }\n        return group;\n    }\n\n    protected cleanAll(): void {\n        this._all = null;\n        this._allSettled = null;\n    }\n\n    public static resolveLazy<T>(promise: PromiseOrLazy<T>, groups: Iterable<PromiseQueue>): Promise<T> {\n        return typeof promise === \"function\" ? Promise.all(PromiseQueueMap.allPromises(groups)).then(promise) : promise;\n    }\n\n    public add(promise: PromiseOrLazy<any>, groupNames: string | string[] = PromiseQueueMap.DefaultGroup): this {\n        const names = typeof groupNames === \"string\" ? [groupNames] : groupNames;\n        const groups = names.map(name => this.ensureGroup(name));\n        const p = PromiseQueueMap.resolveLazy(promise, groups);\n        groups.forEach(group => group.add(p));\n        this.cleanAll();\n        return this;\n    }\n\n    public group(groupName: string = PromiseQueueMap.DefaultGroup): Promise<any[]> {\n        const group = this.groups.get(groupName);\n        return group?.all ?? Promise.resolve([]);\n    }\n\n    public clearGroup(groupName: string = PromiseQueueMap.DefaultGroup): Promise<any[]> {\n        const group = this.groups.get(groupName);\n        this.cleanAll();\n        return group?.clear() ?? Promise.resolve([]);\n    }\n\n    public clear(): Promise<any[]> {\n        const all = this.all;\n        this.groups.forEach(group => group.clear());\n        this.groups.clear();\n        this.cleanAll();\n        return all;\n    }\n}\n"],"mappings":"AAEO,IAAM,aAAN,KAAmB,CACN,SAA2B,CAAC,EACpC,KAA8B,KAC9B,YAA2D,KAEnE,IAAW,KAAsB,CAC7B,YAAK,OAAS,QAAQ,IAAI,KAAK,QAAQ,EAChC,KAAK,IAChB,CAEA,IAAW,YAAmD,CAC1D,YAAK,cAAgB,QAAQ,WAAW,KAAK,QAAQ,EAC9C,KAAK,WAChB,CAEU,KAAK,QAA6B,CACxC,KAAK,SAAS,KAAK,OAAO,EAC1B,KAAK,KAAO,KACZ,KAAK,YAAc,IACvB,CAEO,YAAe,QAAuC,CACzD,OAAO,OAAO,SAAY,WAAa,KAAK,IAAI,KAAK,OAAO,EAAI,OACpE,CAEO,IAAI,QAAmC,CAC1C,IAAM,EAAI,KAAK,YAAY,OAAO,EAClC,YAAK,KAAK,CAAC,EACJ,IACX,CAEO,OAAwB,CAC3B,IAAM,IAAM,KAAK,IACjB,YAAK,SAAS,OAAS,EACvB,KAAK,KAAO,KACL,GACX,CACJ,ECpCO,IAAM,gBAAN,MAAM,gBAAgB,CACzB,OAAuB,aAAe,UAErB,OAAoC,IAAI,IACjD,KAA8B,KAC9B,YAA2D,KAEnE,OAAiB,YAAY,OAAmD,CAC5E,IAAM,YAAiC,IAAI,IAC3C,QAAW,SAAS,OAChB,MAAM,SAAS,QAAQ,SAAW,YAAY,IAAI,OAAO,CAAC,EAE9D,OAAO,WACX,CAEA,IAAW,KAAsB,CAC7B,OAAI,KAAK,KACE,KAAK,MAEhB,KAAK,KAAO,QAAQ,IAAI,iBAAgB,YAAY,KAAK,OAAO,OAAO,CAAC,CAAC,EAClE,KAAK,KAChB,CAEA,IAAW,YAAmD,CAC1D,OAAI,KAAK,YACE,KAAK,aAEhB,KAAK,YAAc,QAAQ,WAAW,iBAAgB,YAAY,KAAK,OAAO,OAAO,CAAC,CAAC,EAChF,KAAK,YAChB,CAEQ,YAAY,KAA4B,CAC5C,IAAI,MAAQ,KAAK,OAAO,IAAI,IAAI,EAChC,OAAK,QACD,MAAQ,IAAI,aACZ,KAAK,OAAO,IAAI,KAAM,KAAK,GAExB,KACX,CAEU,UAAiB,CACvB,KAAK,KAAO,KACZ,KAAK,YAAc,IACvB,CAEA,OAAc,YAAe,QAA2B,OAA4C,CAChG,OAAO,OAAO,SAAY,WAAa,QAAQ,IAAI,iBAAgB,YAAY,MAAM,CAAC,EAAE,KAAK,OAAO,EAAI,OAC5G,CAEO,IAAI,QAA6B,WAAgC,iBAAgB,aAAoB,CAExG,IAAM,QADQ,OAAO,YAAe,SAAW,CAAC,UAAU,EAAI,YACzC,IAAI,MAAQ,KAAK,YAAY,IAAI,CAAC,EACjD,EAAI,iBAAgB,YAAY,QAAS,MAAM,EACrD,cAAO,QAAQ,OAAS,MAAM,IAAI,CAAC,CAAC,EACpC,KAAK,SAAS,EACP,IACX,CAEO,MAAM,UAAoB,iBAAgB,aAA8B,CAE3E,OADc,KAAK,OAAO,IAAI,SAAS,GACzB,KAAO,QAAQ,QAAQ,CAAC,CAAC,CAC3C,CAEO,WAAW,UAAoB,iBAAgB,aAA8B,CAChF,IAAM,MAAQ,KAAK,OAAO,IAAI,SAAS,EACvC,YAAK,SAAS,EACP,OAAO,MAAM,GAAK,QAAQ,QAAQ,CAAC,CAAC,CAC/C,CAEO,OAAwB,CAC3B,IAAM,IAAM,KAAK,IACjB,YAAK,OAAO,QAAQ,OAAS,MAAM,MAAM,CAAC,EAC1C,KAAK,OAAO,MAAM,EAClB,KAAK,SAAS,EACP,GACX,CACJ","names":[]}